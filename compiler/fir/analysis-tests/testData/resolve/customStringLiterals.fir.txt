FILE: customStringLiterals.kt
    public final object id : R|kotlin/Any| {
        private constructor(): R|id| {
            super<R|kotlin/Any|>()
        }

    }
    public final fun R|id|.buildLiteral(body: R|LiteralBuilder.() -> kotlin/Unit|): R|kotlin/Int| {
        ^buildLiteral R|/LiteralBuilder.LiteralBuilder|().R|kotlin/apply|<R|LiteralBuilder|>(R|<local>/body|).R|/LiteralBuilder.build|()
    }
    public final class LiteralBuilder : R|kotlin/Any| {
        public constructor(): R|LiteralBuilder| {
            super<R|kotlin/Any|>()
        }

        public final fun appendString(s: R|kotlin/String|): R|kotlin/Unit| {
        }

        public final fun appendObject(obj: R|kotlin/Any|): R|kotlin/Unit| {
        }

        public final fun build(): R|kotlin/Int| {
            ^build Int(0)
        }

    }
    public final fun test(): R|kotlin/Unit| {
        lval a: R|kotlin/Int| = Int(1)
        lval b: R|kotlin/Int| = Int(2)
        lval x: R|kotlin/Int| = Q|id|.R|/buildLiteral|(<L> = fun R|LiteralBuilder|.<anonymous>(): R|kotlin/Unit| <inline=NoInline>  {
            this@R|special/anonymous|.R|/LiteralBuilder.appendString|(String(str ))
            this@R|special/anonymous|.R|/LiteralBuilder.appendObject|(R|<local>/a|)
            this@R|special/anonymous|.R|/LiteralBuilder.appendString|(String( ))
            this@R|special/anonymous|.R|/LiteralBuilder.appendObject|(R|<local>/b|)
        }
        )
    }
